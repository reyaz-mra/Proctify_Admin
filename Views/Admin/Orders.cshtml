@{
    ViewBag.Title = "Live Orders";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Live Orders</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #FFFDF6;
            min-height: 100vh;
            color: #333;
        }

        .admin-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: #FAF6E9;
            border-right: 2px solid #DDEB9D;
            padding: 20px 0;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            z-index: 1000;
        }

        .logo-section {
            padding: 20px;
            text-align: center;
            border-bottom: 2px solid #DDEB9D;
            margin-bottom: 20px;
        }

        .logo {
            font-size: 2em;
            font-weight: 700;
            color: #A0C878;
            margin-bottom: 10px;
        }

        .logo-subtitle {
            font-size: 0.9em;
            color: #666;
            font-weight: 500;
        }

        .nav-menu {
            padding: 0 20px;
        }

        .nav-item {
            margin-bottom: 5px;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: #333;
            text-decoration: none;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .nav-link:hover {
            background: #DDEB9D;
            color: #333;
            text-decoration: none;
            transform: translateX(5px);
        }

        .nav-link.active {
            background: #A0C878;
            color: white;
            box-shadow: 0 4px 15px rgba(160, 200, 120, 0.3);
        }

        .nav-icon {
            margin-right: 12px;
            font-size: 1.2em;
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 30px;
            background: #FFFDF6;
        }

        .page-header {
            background: #FAF6E9;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 2px solid #DDEB9D;
        }

        .page-title {
            font-size: 2.2em;
            font-weight: 700;
            color: #333;
            margin: 0;
        }

        .page-subtitle {
            color: #666;
            margin-top: 5px;
            font-size: 1.1em;
        }

        /* Orders Section */
        .orders-section {
            background: #FAF6E9;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 2px solid #DDEB9D;
        }

        .section-title {
            font-size: 1.8em;
            font-weight: 600;
            color: #333;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-title::before {
            content: "üìã";
            font-size: 1.2em;
        }

        .orders-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .order-card {
            background: white;
            color: #333;
            padding: 20px;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
            border: 2px solid #DDEB9D;
        }

        .order-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #A0C878, #DDEB9D, #FAF6E9);
            background-size: 300% 100%;
            animation: rainbow 3s ease-in-out infinite;
        }

        @@keyframes rainbow {
            0%, 100% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
        }

        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .new-order {
            animation: newOrderPulse 2s ease-out;
            border: 2px solid #A0C878;
        }

        @@keyframes newOrderPulse {
            0% {
                transform: scale(1);
                box-shadow: 0 4px 15px rgba(160, 200, 120, 0.5);
            }
            50% {
                transform: scale(1.02);
                box-shadow: 0 8px 25px rgba(160, 200, 120, 0.8);
            }
            100% {
                transform: scale(1);
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            }
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .table-info {
            display: flex;
            flex-direction: column;
        }

        .table-number {
            font-size: 1.4em;
            font-weight: 700;
            color: #333;
        }

        .table-id {
            font-size: 0.8em;
            opacity: 0.8;
            color: #666;
        }

        .order-time {
            font-size: 0.9em;
            opacity: 0.9;
            color: #666;
        }

        .order-status {
            background: #A0C878;
            color: white;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            font-weight: 600;
            text-transform: uppercase;
        }

        .order-items {
            margin-top: 15px;
        }

        .item-count {
            font-size: 0.9em;
            opacity: 0.9;
            color: #666;
        }

        .no-orders {
            text-align: center;
            padding: 40px;
            color: #666;
            font-size: 1.2em;
        }

        .no-orders::before {
            content: "üçΩÔ∏è";
            font-size: 3em;
            display: block;
            margin-bottom: 15px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: modalSlideIn 0.3s ease-out;
        }

        @@keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            background: #A0C878;
            color: white;
            padding: 20px 25px;
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.5em;
            font-weight: 600;
            margin: 0;
        }

        .close-modal {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            font-size: 1.8em;
            cursor: pointer;
            padding: 5px 10px;
            border-radius: 50%;
            transition: all 0.3s ease;
            line-height: 1;
        }

        .close-modal:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .modal-body {
            padding: 25px;
        }

        .order-detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #DDEB9D;
        }

        .order-detail-row:last-child {
            border-bottom: none;
        }

        .detail-label {
            font-weight: 600;
            color: #333;
        }

        .detail-value {
            color: #666;
        }

        .items-list {
            margin: 20px 0;
        }

        .item-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #DDEB9D;
        }

        .item-name {
            font-weight: 600;
            color: #333;
        }

        .item-details {
            text-align: right;
            color: #666;
        }

        .total-row {
            background: #FAF6E9;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: right;
            font-weight: 700;
            font-size: 1.2em;
            color: #333;
        }

        .status-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
        }

        .status-btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-pending {
            background: #f39c12;
            color: white;
        }

        .btn-progress {
            background: #3498db;
            color: white;
        }

        .btn-completed {
            background: #A0C878;
            color: white;
        }

        .status-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #A0C878;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 20px;
            }

            .orders-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Mobile Menu Toggle */
        .mobile-menu-toggle {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: #A0C878;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
            font-size: 1.2em;
        }

        @@media (max-width: 768px) {
            .mobile-menu-toggle {
                display: block;
            }
        }
    </style>
</head>
<body>
    <!-- Mobile Menu Toggle -->
    <button class="mobile-menu-toggle" id="mobileMenuToggle">‚ò∞</button>

    <div class="admin-container">
        <!-- Sidebar -->
        <div class="sidebar" id="sidebar">
            <div class="logo-section">
                <div class="logo">üçΩÔ∏è FoodMenu</div>
                <div class="logo-subtitle">Restaurant Management</div>
            </div>
            
            <nav class="nav-menu">
                <div class="nav-item">
                    <a href="/Admin/Dashboard" class="nav-link">
                        <span class="nav-icon">üìä</span>
                        Dashboard
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/Admin/Orders" class="nav-link active">
                        <span class="nav-icon">üìã</span>
                        Live Orders
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/Admin/Analytics" class="nav-link">
                        <span class="nav-icon">üìà</span>
                        Sales Analytics
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/Admin/Categories" class="nav-link">
                        <span class="nav-icon">üìÇ</span>
                        Categories
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/Admin/MenuItems" class="nav-link">
                        <span class="nav-icon">üçï</span>
                        Menu Items
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/Admin/Tables" class="nav-link">
                        <span class="nav-icon">ü™ë</span>
                        Tables
                    </a>
                </div>
                <div class="nav-item">
                    <a href="/Admin/Settings" class="nav-link">
                        <span class="nav-icon">‚öôÔ∏è</span>
                        Settings
                    </a>
                </div>
            </nav>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="page-header">
                <h1 class="page-title">üìã Live Orders</h1>
                <p class="page-subtitle">Monitor and manage incoming orders in real-time</p>
            </div>

            <!-- Live Orders Section -->
            <div class="orders-section">
                <h2 class="section-title">Live Order Notifications</h2>
                <div id="ordersList">
                    <div class="loading">
                        <div class="spinner"></div>
                        <div>Loading orders...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div class="modal" id="orderModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Order Details</h3>
                <button class="close-modal" id="closeOrderModal">&times;</button>
            </div>
            <div class="modal-body" id="orderDetails">
                <!-- Order details will be populated here -->
            </div>
        </div>
    </div>

    <script>
        let currentOrders = new Set();
        let previousOrderCount = 0;
        let audioContext = null;

        // Mobile menu toggle
        document.getElementById('mobileMenuToggle').addEventListener('click', function() {
            document.getElementById('sidebar').classList.toggle('open');
        });

        // User must click this to enable notification sound and browser notifications.
        function enableNotifications() {
            ensureAudioContext();
            requestNotificationPermission();
            playNotificationSound();
        }

        function ensureAudioContext() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            if (audioContext.state === 'suspended') {
                return audioContext.resume();
            }
            return Promise.resolve();
        }

        function createNotificationSound() {
            if (!audioContext) return;

            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();

            oscillator.type = "sine";
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);

            oscillator.frequency.setValueAtTime(900, audioContext.currentTime);
            oscillator.frequency.setValueAtTime(1400, audioContext.currentTime + 0.12);
            oscillator.frequency.setValueAtTime(900, audioContext.currentTime + 0.24);

            gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);

            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.3);
        }

        function playNotificationSound() {
            ensureAudioContext().then(createNotificationSound);
        }

        function requestNotificationPermission() {
            if ('Notification' in window && Notification.permission === 'default') {
                Notification.requestPermission();
            }
        }

        function showBrowserNotification(title, body) {
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification(title, {
                    body,
                    icon: '/favicon.ico',
                    badge: '/favicon.ico'
                });
            }
        }

        function fetchOrders() {
            fetch('/Admin/GetPendingOrders')
                .then(res => res.json())
                .then(data => {
                    if (!Array.isArray(data)) {
                        document.getElementById('ordersList').innerHTML =
                            '<div class="no-orders">Error: Data format from server unexpected</div>';
                        return;
                    }

                    const ordersContainer = document.getElementById('ordersList');
                    let currentOrderCount = data.length;

                    // Compare for NEW orders and play sound/send notification!
                    if (currentOrderCount > previousOrderCount && previousOrderCount > 0) {
                        const newOrdersCount = currentOrderCount - previousOrderCount;
                        playNotificationSound();
                        showBrowserNotification(
                            'New Order Received!',
                            `${newOrdersCount} new order${newOrdersCount > 1 ? 's' : ''} received`
                        );
                    }
                    previousOrderCount = currentOrderCount;

                    if (data.length === 0) {
                        ordersContainer.innerHTML = `
                            <div class="no-orders">
                                <div>No pending orders at the moment</div>
                                <div style="font-size: 0.9em; margin-top: 10px; opacity: 0.7;">
                                    New orders will appear here automatically
                                </div>
                            </div>
                        `;
                        currentOrders.clear();
                        return;
                    }

                    // For 'new-order' styling, reset on each poll
                    const newOrders = new Set();
                    let html = '<div class="orders-grid">';
                    data.forEach(order => {
                        const orderKey = `${order.orderId}-${order.tableCode}`;
                        const isNewOrder = !currentOrders.has(orderKey);
                        newOrders.add(orderKey);

                        const itemsArr = order.orderitems || order.items || [];
                        html += `
                            <div class="order-card ${isNewOrder ? 'new-order' : ''}"
                            data-id="${order.orderId}" data-table="${order.tableId}">
                                <div class="order-header">
                                    <div class="table-info">
                                     <div class="table-number">Table ${order.tableId}</div>
                                        <div class="table-id">ID: ${order.tableId || 'N/A'}</div>
                                    </div>
                                    <div class="order-status">${order.status}</div>
                                </div>
                                <div class="order-items">
                                    <div class="item-count">${itemsArr.length} item(s)</div>
                                    <div style="font-size: 0.8em; opacity:0.8; margin-top: 5px;">
                                        ${itemsArr.map(item => `${item.name} x${item.quantity}`).join(', ')}
                                    </div>
                                </div>
                            </div>
                        `;
                    });
                    html += '</div>';
                    ordersContainer.innerHTML = html;

                    currentOrders = newOrders; // Update "seen" orders for the next fetch
                })
                .catch(error => {
                    console.error('Error fetching orders:', error);
                    document.getElementById('ordersList').innerHTML = `
                        <div class="no-orders">
                            <div>Error loading orders</div>
                            <div style="font-size: 0.9em; margin-top: 10px; opacity: 0.7;">
                                Please refresh the page
                            </div>
                        </div>
                    `;
                });
        }

        // Order Card Click Event (event delegation)
        document.addEventListener('click', function (e) {
            const card = e.target.closest('.order-card');
            if (!card) return;

            const orderId = card.getAttribute('data-id');
            const modal = document.getElementById('orderModal');
            const modalBody = document.getElementById('orderDetails');
            modalBody.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <div>Loading order details...</div>
                </div>
            `;
            modal.style.display = 'block';

            fetch(`/Admin/GetOrderDetails?orderId=${encodeURIComponent(orderId)}`)
                .then(res => res.json())
                .then(order => {
                    if (!order || order.error) {
                        modalBody.innerHTML = `
                            <div class="no-orders">
                                <div>${order ? order.error : "Order not found"}</div>
                            </div>
                        `;
                        return;
                    }
                    let html = `
                        <div class="order-detail-row"><span class="detail-label">Order ID:</span>
                            <span class="detail-value">#${order.orderId}</span>
                        </div>
                        <div class="order-detail-row"><span class="detail-label">Table:</span>
                            <span class="detail-value">${order.tableCode} (ID: ${order.tableId || 'N/A'})</span>
                        </div>
                        <div class="order-detail-row"><span class="detail-label">Time:</span>
                            <span class="detail-value">${order.orderTime}</span>
                        </div>
                        <div class="order-detail-row"><span class="detail-label">Status:</span>
                            <span class="detail-value">${order.status}</span>
                        </div>
                        <div class="items-list">
                            <h4 style="margin-bottom: 15px; color: #333;">Order Items:</h4>
                    `;
                    (order.items || order.orderitems || []).forEach(item => {
                        html += `
                            <div class="item-row">
                                <span class="item-name">${item.name}</span>
                                <div class="item-details">
                                    <div>Qty: ${item.quantity}</div>
                                    <div>‚Çπ${item.price} each</div>
                                    <div style="font-weight: 600;">‚Çπ${item.total}</div>
                                </div>
                            </div>
                        `;
                    });
                    html += `
                        </div>
                        <div class="total-row">
                            Total: ‚Çπ${order.total}
                        </div>
                        <div class="status-buttons">
                            <button class="status-btn btn-pending" onclick="updateStatus(${order.orderId}, 'Pending')">Pending</button>
                            <button class="status-btn btn-progress" onclick="updateStatus(${order.orderId}, 'In Progress')">In Progress</button>
                            <button class="status-btn btn-completed" onclick="updateStatus(${order.orderId}, 'Completed')">Completed</button>
                        </div>
                    `;
                    modalBody.innerHTML = html;
                })
                .catch(error => {
                    console.error('Error fetching order details:', error);
                    modalBody.innerHTML = `
                        <div class="no-orders">
                            <div>Error loading order details</div>
                        </div>
                    `;
                });
        });

        // Close modal handlers
        document.getElementById('closeOrderModal').onclick = function () {
            document.getElementById('orderModal').style.display = 'none';
        };
        window.onclick = function (event) {
            const modal = document.getElementById('orderModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        };

        // Allow updating status from modal
        window.updateStatus = function (orderId, status) {
            fetch('/Admin/UpdateOrderStatus', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `orderId=${encodeURIComponent(orderId)}&status=${encodeURIComponent(status)}`
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('orderModal').style.display = 'none';
                        fetchOrders();
                    } else {
                        alert('Error updating order status: ' + (data.message || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error updating status:', error);
                    alert('Error updating order status');
                });
        };

        // Start polling and initial load
        setInterval(fetchOrders, 3000);
        fetchOrders();
    </script>
</body>
</html> 